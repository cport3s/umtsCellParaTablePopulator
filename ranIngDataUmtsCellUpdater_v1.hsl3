#encoding=utf-8
''' 2020-04-03: The script takes around 8 days to scroll through ~1700 BTS3900.
                It's going to generate a log file each time the script starts.
    2020-04-06: Stopped log collection. Will check to add again later on.
    2020-04-16: Updated to read UNODEBID from RNC and include in DB.
    2020-09-07: Update Server IP Address.
    2020-11-12: CGI Calculator integration.
    2020-12-23: Fixed CGI Calculator bug. Implement new db population method. 
    2021-02-24: Include new db table parameter : siteid. 
				Currently the script loops through aprox. 15000 cells in 13 hours.
	2021-08-11: Fix CGI structure & start collecting PCPICH.
	2021-10-27: Start collecting cell act & adm status.
'''
# ----------------------------------------------------------LIBRARIES----------------------------------------------------------#

# ----------------------------------------------------------VARIABLES----------------------------------------------------------#
bscserverip = '172.16.121.41'
dbuser = 'sitedb'
dbpassword = 'BSCAltice.123'
mccmnc = "06370f01"
# ----------------------------------------------------------FUNCTIONS----------------------------------------------------------#
def ranIngDataUmtsCellUpdate(unodebname, band)
	tmpNodeBList = {}
	for x in range(len(unodebname))
		# Check if key exists in dict. If it's not there, initialize key with empty list as value.
		if unodebname[x] not in tmpNodeBList
			tmpNodeBList[unodebname[x]] = []
			# Append current band (since the key is empty)
			tmpNodeBList[unodebname[x]].append(band[x])
		else
			# If the key exists and the current band is not on the value list, then append
			if band[x] not in tmpNodeBList[unodebname[x]]
				tmpNodeBList[unodebname[x]].append(band[x])
			end
		end
	end
	for key in tmpNodeBList
		setClause = ""
		uSiteId = key[1:-1]
		neName = "M" + key[1:]
		# Check the key's band list
		if 'Band5' in tmpNodeBList[key] and 'Band8' in tmpNodeBList[key]
			setClause += "`U850` = 'U850', `U900` = 'U900'"
		end
		if 'Band5' in tmpNodeBList[key] and 'Band8' not in tmpNodeBList[key]
			setClause += "`U850` = 'U850', `U900` = 'N/A'"
		end
		if 'Band5' not in tmpNodeBList[key] and 'Band8' in tmpNodeBList[key]
			setClause += "`U850` = 'N/A', `U900` = 'U900'"
		end
		if 'Band5' not in tmpNodeBList[key] and 'Band8' not in tmpNodeBList[key]
			setClause += "`U850` = 'N/A', `U900` = 'N/A'"
		end
		query = "UPDATE raningdata SET " + setClause + " WHERE (`Site` = '" + str(uSiteId) + "') and (`Nodo` = '" + neName + "');"
		# Print query
		Print(StrfTime("%Y%m%d:%H%M%S:") + query)
		# Execute query
		ExecuteCmd(ssh, query)
	end
end
# -----------------------------------------------------------MAINCODE----------------------------------------------------------#
# Open the connection
ssh = OpenSSH(bscserverip, dbuser, dbpassword)
if IsConnected(ssh) == True
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection success')
    # Connect to the DB
    ExecuteCmd(ssh, 'mysql -u ' + dbuser + ' -p' + dbpassword + ' alticedr_sitedb')
    # Get NE list by type
    NEList = GetNELstByType('BSC6900 UMTS') + GetNELstByType('BSC6910 UMTS')
    # Loop through the NE list
    for ne in NEList
        # Check if NE is online before connecting
        if GetNEStatus(ne) == 1
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + ' is online')
            # Initialize lists (this avoids leftover information from the last loop)
            ucellid = []
            ucellname = []
            unodebname = []
            urncname = []
            ulac = []
            urac = []
            dlarfcn = []
            ularfcn = []
            uband = []
            upsc = []
            uNodebId = []
			uPcpich = []
			cellAdmState = []
			cellActState = []
            # Connect to the NE on loop
            ConnectNE(ne)
            Print(StrfTime("%Y%m%d:%H%M%S:") + 'Connected to ' + ne)
            # List all UCELL information on the RNC
            ClearMMLBuffer()
            @LST UCELL:;
            ucellreport = GetAllMMLReport()
            # Loop through all the output reports of the LST UCELL and append results to the lists
            for report in ucellreport
                ucellreportparse = ParseMMLRpt(report)
                ucellid.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Cell ID'))[1])
                ucellid = ucellid[0]
                ucellname.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Cell Name'))[1])
                ucellname = ucellname[0]
                unodebname.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'NodeB Name'))[1])
                unodebname = unodebname[0]
                ulac.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Location Area Code'))[1])
                ulac = ulac[0]
                urac.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Routing Area Code'))[1])
                urac = urac[0]
                dlarfcn.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Downlink UARFCN'))[1])
                dlarfcn = dlarfcn[0]
                ularfcn.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Uplink UARFCN'))[1])
                ularfcn = ularfcn[0]
                uband.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Band Indicator'))[1])
                uband = uband[0]
                upsc.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'DL Primary Scrambling Code'))[1])
                upsc = upsc[0]
				cellAdmState.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Validation indication'))[1])
				cellAdmState = cellAdmState[0]
				cellActState.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Cell administrative state'))[1])
				cellActState = cellActState[0]
                urncname = ne
            end
            ClearMMLBuffer()
            for i in range(len(ucellid))
				# Get Node B ID per cell
                SendMML('LST UNODEB:LSTTYPE=ByNodeBName,NODEBNAME="' + unodebname[i] + '";')
                uNodebIdParsedReport = ParseMMLRpt(GetMMLReport(0))
                if GetNEType(ne) == 'BSC6910UMTS'
                    uNodebId.append(GetAttrValueByIdx(uNodebIdParsedReport, 0, 1, 0))
                elif GetNEType(ne) == 'BSC6900UMTS'
                    uNodebId.append(GetAttrValueByIdx(uNodebIdParsedReport, 0, 0, 0))
                end
                # Find the content between the parenthesis
                ulacFindCharStart = ToString(ulac[i])[1].find('(') + 1
                ulacFindCharEnd = ToString(ulac[i])[1].find(')')
                uracFindCharStart = ToString(urac[i])[1].find('(') + 1
                uracFindCharEnd = ToString(urac[i])[1].find(')')
                ulac[i] = ulac[i][ulacFindCharStart:ulacFindCharEnd]
                urac[i] = urac[i][uracFindCharStart:uracFindCharEnd]
                ClearMMLBuffer()
				# Get PCPICH per cell
				SendMML('LST UPCPICH:CELLID=' + ucellid[i] + ';')
				uPcpichParsedReport = ParseMMLRpt(GetMMLReport(0))
				if GetNEType(ne) == 'BSC6910UMTS'
                    uPcpich.append(GetAttrValueByIdx(uPcpichParsedReport, 0, 3, 0))
                elif GetNEType(ne) == 'BSC6900UMTS'
                    uPcpich.append(GetAttrValueByIdx(uPcpichParsedReport, 0, 4, 0))
                end
				ClearMMLBuffer()
            end
            # Pass all data to the provisioning function
            Print(StrfTime("%Y%m%d:%H%M%S:") + 'Calling Provisioning Function on ' + ne)
            #umtsCellParaDbUpdate(ucellid, ucellname, unodebname, urncname, ulac, urac, dlarfcn, ularfcn, uband, upsc, uNodebId, mccmnc, uPcpich, cellAdmState, cellActState)
			ranIngDataUmtsCellUpdate(unodebname, uband)
        # If NE is not connected, then...
        else
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + " is offline")
        end
    # End initial FOR loop
    end
    # Close the connection. 
    CloseSSH(ssh)
else
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection failed')
end
Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection closed')
Print("Finished!")
#encoding=utf-8
''' 2020-04-03: The script takes around 8 days to scroll through ~1700 BTS3900.
                It's going to generate a log file each time the script starts.
    2020-04-06: Stopped log collection. Will check to add again later on.
    2020-04-16: Updated to read UNODEBID from RNC and include in DB.
    2020-09-07: Update Server IP Address.
    2020-11-12: CGI Calculator integration.
    2020-12-23: Fixed CGI Calculator bug. Implement new db population method. 
    2021-02-24: Include new db table parameter : siteid. Currently the script loops through aprox. 15000 cells in 13 hours.
'''
# ----------------------------------------------------------LIBRARIES----------------------------------------------------------#

# ----------------------------------------------------------VARIABLES----------------------------------------------------------#
bscserverip = '172.16.121.41'
dbuser = 'sitedb'
dbpassword = 'BSCAltice.123'
mccmnc = "0173f010"
# ----------------------------------------------------------FUNCTIONS----------------------------------------------------------#
def umtsCellParaDbUpdate(ucellidf, ucellnamef, unodebnamef, urncnamef, ulacf, uracf, dlarfcnf, ularfcnf, ubandf, upscf, unodebidf, mccmnc)
    dataCounter = 0
    query = "REPLACE INTO umtscellpara (`ucellid`, `ucellname`, `unodebname`, `urncname`, `ulac`, `urac`, `dlarfcn`, `ularfcn`, `uband`, `upsc`, `unodebid`, `cgi`, `siteid`) VALUES "
    for i in range(len(ucellidf))
        uCellId = ToString(ucellidf[i])[1]
        uCellName = ToString(ucellnamef[i])[1]
        uNodeBName = ToString(unodebnamef[i])[1]
        uSiteId = uNodeBName[1:-1]
        uLac = ToString(ulacf[i])[1]
        uRac = ToString(uracf[i])[1]
        dlArfcn = ToString(dlarfcnf[i])[1]
        ulArfcn = ToString(ularfcnf[i])[1]
        uBand = ToString(ubandf[i])[1]
        uPSC = ToString(upscf[i])[1]
        uNodeBId = ToString(unodebidf[i])[1]
        lacHex = str(hex(int(uLac)))[2:]
        uCellIdHex = str(hex(int(uCellId)))[2:]
        # CGI Lac must be 4 digits
        while len(lacHex) < 4
            lacHex = "0" + lacHex
        end
        uCellIdHex = str(hex(int(ucellidf[i])))[2:]
        # CGI CI must be 4 digits
        while len(uCellIdHex) < 4
            uCellIdHex = "0" + uCellIdHex
        end
        cgi = mccmnc + lacHex + uCellIdHex
        #Print(StrfTime("%Y%m%d:%H%M%S:") + 'Populating Cell ID ' + uCellId + ' info.')
        query += "(" + uCellId + ", '" + uCellName + "', '" + uNodeBName + "', '" + urncnamef + "', " + uLac + ", " + uRac + ", " + dlArfcn + ", " + ulArfcn + ", '" + uBand + "', " + uPSC + ", " + uNodeBId + ", '" + cgi + "', " + uSiteId + ")"
        # Increase counter with each loop
        dataCounter += 1
        # Check when you get to the last line
        if i < len(ucellidf) - 1 and dataCounter < 21
            query += ", "
        else
            # Close the query and execute on database
            query += ";"
            # We use REPLACE command because it acts as an INSERT when the data doesn't exists.
            ExecuteCmd(ssh, query)
            Print(StrfTime("%Y%m%d:%H%M%S:") + query)
            # Restart the query string
            query = "REPLACE INTO umtscellpara (`ucellid`, `ucellname`, `unodebname`, `urncname`, `ulac`, `urac`, `dlarfcn`, `ularfcn`, `uband`, `upsc`, `unodebid`, `cgi`, `siteid`) VALUES "
            dataCounter = 0
        end
    end
end
# -----------------------------------------------------------MAINCODE----------------------------------------------------------#
# Open the connection
ssh = OpenSSH(bscserverip, dbuser, dbpassword)
if IsConnected(ssh) == True
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection success')
    # Connect to the DB
    ExecuteCmd(ssh, 'mysql -u ' + dbuser + ' -p' + dbpassword + ' alticedr_sitedb')
    # Get NE list by type
    NEList = GetNELstByType('BSC6900 UMTS') + GetNELstByType('BSC6910 UMTS')
    # Loop through the NE list
    for ne in NEList
        # Check if NE is online before connecting
        if GetNEStatus(ne) == 1
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + ' is online')
            # Initialize lists (this avoids leftover information from the last loop)
            ucellid = []
            ucellname = []
            unodebname = []
            urncname = []
            ulac = []
            urac = []
            dlarfcn = []
            ularfcn = []
            uband = []
            upsc = []
            uNodebId = []
            # Connect to the NE on loop
            ConnectNE(ne)
            Print(StrfTime("%Y%m%d:%H%M%S:") + 'Connected to ' + ne)
            # List all UCELL information on the RNC
            ClearMMLBuffer()
            @LST UCELL:;
            ucellreport = GetAllMMLReport()
            # Loop through all the output reports of the LST UCELL and append results to the lists
            for report in ucellreport
                ucellreportparse = ParseMMLRpt(report)
                ucellid.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Cell ID'))[1])
                ucellid = ucellid[0]
                ucellname.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Cell Name'))[1])
                ucellname = ucellname[0]
                unodebname.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'NodeB Name'))[1])
                unodebname = unodebname[0]
                ulac.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Location Area Code'))[1])
                ulac = ulac[0]
                urac.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Routing Area Code'))[1])
                urac = urac[0]
                dlarfcn.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Downlink UARFCN'))[1])
                dlarfcn = dlarfcn[0]
                ularfcn.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Uplink UARFCN'))[1])
                ularfcn = ularfcn[0]
                uband.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'Band Indicator'))[1])
                uband = uband[0]
                upsc.append(Sequence2List(GetColumnByName(ucellreportparse, 0, 'DL Primary Scrambling Code'))[1])
                upsc = upsc[0]
                urncname = ne
            end
            ClearMMLBuffer()
            for i in range(len(ucellid))
                SendMML('LST UNODEB:LSTTYPE=ByNodeBName,NODEBNAME="' + unodebname[i] + '";')
                uNodebIdParsedReport = ParseMMLRpt(GetMMLReport(0))
                if GetNEType(ne) == 'BSC6910UMTS'
                    uNodebId.append(GetAttrValueByIdx(uNodebIdParsedReport, 0, 1, 0))
                elif GetNEType(ne) == 'BSC6900UMTS'
                    uNodebId.append(GetAttrValueByIdx(uNodebIdParsedReport, 0, 0, 0))
                end
                # Find the content between the parenthesis
                ulacFindCharStart = ToString(ulac[i])[1].find('(') + 1
                ulacFindCharEnd = ToString(ulac[i])[1].find(')')
                uracFindCharStart = ToString(urac[i])[1].find('(') + 1
                uracFindCharEnd = ToString(urac[i])[1].find(')')
                ulac[i] = ulac[i][ulacFindCharStart:ulacFindCharEnd]
                urac[i] = urac[i][uracFindCharStart:uracFindCharEnd]
                ClearMMLBuffer()
            end
            # Pass all data to the provisioning function
            Print(StrfTime("%Y%m%d:%H%M%S:") + 'Calling Provisioning Function on ' + ne)
            umtsCellParaDbUpdate(ucellid, ucellname, unodebname, urncname, ulac, urac, dlarfcn, ularfcn, uband, upsc, uNodebId, mccmnc)
        # If NE is not connected, then...
        else
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + " is offline")
        end
    # End initial FOR loop
    end
    # Close the connection. 
    CloseSSH(ssh)
else
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection failed')
end
Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection closed')
Print("Finished!")